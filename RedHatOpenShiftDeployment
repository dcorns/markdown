#Setting Up Node On RedHat OpenShift
A short tutorial explaining how to get started with Node on OpenShift.
Be sure that you have [**git**](https://git-scm.com/) installed before following this tutorial.
##Why use RedHat OpenShift?
RedHat OpenShift provides 3 gears for running your application at no charge. They support a [wide range of languages](https://developers.openshift.com/en/languages-overview.html) as well as community provided solutions that integrate into their product. If they do not have what you need, no problem, they make it easy for you to [build your own](https://developers.openshift.com/en/get-involved-extend-openshift.html). They have [database add-ons](https://developers.openshift.com/en/databases-overview.html) built into the product. It is easy to get started and the free plan does not require a credit card. Simply [create an account](https://www.openshift.com/app/account/new) and start building your server.
##Setting up Your Node.js Instance
####[Create Account](https://www.openshift.com/app/account/new)
If you have not done so already created an account. Use the link above if you like. Once your account is created you will be able to build your server.
#####Creating The Node Application
Once you login to your new account you will see an Applications tab on the upper right. If not already selected, choose it and then click on **Add Application...**. You will be presented with a list of cartridges (cartridges are used to create different flavors of servers, databases and the like) and a **Browse by tag...**. Choose Browse by tag and select Node.js from the list. You will then be provided with a list of Node based cartridges. For the purposes of this tutorial, we want to simply select a node server. There are currently two. Scroll down the list to find [Node.js 0.12](https://github.com/ryanj/nodejs-custom-version-openshift) *written by Ryan Jarvinen* The reason for selecting this cartridge is that while it defaults to ver 0.12. We can use any version of Node.js that we desire by making a simple change to the package.json file. The other cartridge automatically applies security updates but only works with ver 0.10. Choosing Ryan's cartridge will simplify things and make it easier to change the version in future deployments. Once you have found Ryan's cartridge, click the **Learn more** link, and then click on **Deploy**. You will then be presented with the application configuration page. For now, we will just keep the defaults. Scroll to the bottom of the page and click **Create Application**. It might take a little time for OpenShift to complete this task, so you can take a little break and come back. Once the application has been created, you will be presented with an information screen. Click the **Continue to the application overview page** link at the top of the page. At this point your website is up and running with the default files. Leave this page open for now and open a command prompt for the next step.
####Setting up Access to your Application
#####Installing the Client Tools
This tutorial is partial to linux/unix operating systems, so if you are using a different operating system you can follow the steps [here](https://developers.openshift.com/en/getting-started-overview.html?sc_cid=70160000000UJArAAO&gclid=Cj0KEQiAlae1BRCU2qaz2__t9IIBEiQAKRGDVbCAJLbI8ox3wy-m893aPwWpvvSx6hwbYRyad-wFWEMaAgfD8P8HAQ) to find client tools install instructions more specific to your operating system. Otherwise, read on. The client tools are written in **Ruby**, so if you do not already have Ruby installed, do so now using the package manager for your version of linux. For the latest version on Fedora enter the following command as root user or using the **sudo** prefix: ```dnf install rubygems``` For other versions of linux, you should only need to replace *dnf* with the package manager for your version of linux. If you are unsure how to run your package manager, visit the website for your version of linux. Once ruby is installed we can install the client tools as root or using the sudo prefix ```gem install rhc```. You may might be able to install the tools using your linux package manager directly. Only do it if you can not get Ruby to work as it will not be updated as often as the Ruby version.
####Running Client Setup
Enter ```rhc setup``` and you will be prompted with a website option. Accept the default by entering *yes*. Then enter your *username* and *password*. Now the setup will create ssh keys to be used for accessing your site. Unless you know enough to do otherwise, accept all the defaults except for the key name. Use a name to associate the key with your site. The last thing that the setup will do is verify that you have git installed. You will not find out what it does when git is not installed since you installed it before attempting this tutorial as instructed at the beginning, so at this point setup will exit.
####Download the Source Code
Ok, remember how I said to leave application overview page open? You did, right? Lets go back to the browser and copy the source code url located on the right hand side of the page. And if you did not leave the page open, no worries, just click the application tab and then select the application to open the page up again. Now lets go back to the command prompt. Change to or create the directory in which you want to keep your development projects. Then enter ```git clone *paste url here*```. In a few seconds you should have all the files for your website and the required settings to interact with the server using git. Now lets take a look at what we get.
####Default Structure and Files
The following directories are created by default: **.openshift**(don't touch this), **.git**(of course, don't touch this either), **node_modules**, and **static**. Other than static and the root directory of the project, you probably will not want to directly modify any of the default directories. The following files are created in the root project directory: **package.json**, **README**, **README.md**, **server.js**, and **index.html**. package.json, of course is our application's configuration file for all things node. README contains some very useful information regarding the default characteristics of the application. README.md as you might expect contains information about our cartridge. Eventually, you will want to replace this with your own README.md, but it contains some useful reference material, so you should probably keep it around for now. Lets look at these directories and files more closely.
####package.json
We are dealing with this file first as it is the first one we want to modify. It is within the package.json file that we choose the version of node with which we want our application to use. If we open the package.json up, we will find that the second key is called 'version' initially the version value is '0.12'. Change the value to your preferred version. Now scroll down to the engines section and make the node value equal to your preferred version. It will probably look like this ```"node": ">= 0.12.0"```. so if you specified 5.4.1 for the value of your versions key, your node engine should look like this ```"node": ">= 5.4.1"```, behold, your application will now be using your chosen version of node when you push it back up to OpenShift. I like using the latest stable [node version](https://nodejs.org/en/). You may prefer to be more conservative or cutting edge, so choose your version, (make sure you have it on your development machine), replace the values in the package.json, save and git push. Your server is now running that version of node. Their are a number of other things in the package.json that you may want to modify or understand better. They are beyond the scope of the tutorial. For more information on the all important package.json [see the npm site](https://docs.npmjs.com/files/package.json).
####.gitignore
Right, this file does not exist, but it should. Make sure to create it and at least add the node_modules folder to it. [more information about .gitignore](https://git-scm.com/docs/gitignore)
####/static
Before we can discuss server.js or index.html, we need to go over the static directory. It is mostly self explanatory, but there are some things we should know that will make working on our application with OpenShift easier. If you look inside the directory, you will find that there is not much inside. Just a CSS folder with a site.css file in it. This should tip you off to the fact that all the files that need to be available on the client side of your app should be placed in here. This is the default 'root' of the website on the client side. Later you will see how this can be changed, but this is way you will be setup initially.
####server.js
The first thing you will notice in the server.js file, if you open it in a decent editor, is that it is missing some semicolons and has some require statements that can't find the node modules to which they refer. Apparently we got lucky with the semicolons, since the app runs fine on OpenShift, but if you are like me, you will probably want to add them(you may not need to do this; I submitted a pull request). Once we start changing the file around, it could become a problem. So what about the require statements. That is an easy fix, just run ```npm install```. This will load up your computer with the required files. If you have used git to deploy to a service like this before, you may have had to make sure that you did not 'git' ignore the node modules because the service required them to be uploaded. OpenShift loads the modules using the package.json so we don't need to upload them. If you normally use node [express.js](http://expressjs.com/) on the back end, you probably are surprised to see that it does not exist here. Instead, another framework called [restify is used.](http://restify.com/) We could replace restify with express, but we like learning new things(right?), so we will stick with it. Also, I kind of like it. Lets get back to the static folder for a moment. We wont need to leave server.js, just look at line 26. Here we find a regular expression and the serveStatic method of **restify**. Notice that they are both passed in as parameters to the server app.get method. You should also see that the regular expression contains the directory names *css*, *js*, and *img* inside the inner parenthesis separated by the '|' character. Any directory added to this group will be exposed to the application as top level directory on the client side. Note that the *img* and *js* directories do not exist in static. If you actually create the directories, the server will be able to use them. Any folder that we want to expose as a top level directory in application root will need to have its name in the inner parenthesis of this regular expression. If you want your your application root to be something other than /static, you can change the end of line 26 from static to whatever directory name you choose. The nice thing here is that the subdirectory names can stay the same. The directories and files themselves need only be moved to the directory you appoint by replacing './static/' with './*your directory*/' at the end of the line.
####index.html
index.html is the only client side asset that appears outside of the static directory, or application root. It remains in the project root directory. If we change any of the directories specified in server.js line 26, we will also need to change any reference to those paths here. For instance, with the default settings we have a reference to 'css/style.css'. If choose to keep our style sheets in a folder called 'styles', then we would add the directory name to server.js line 26 and change the existing path in index.html to 'styles/style.css'.
###Wrapping it Up
I hope this tutorial has helped you get up and running quickly with a node application on OpenShift. We did not actually make an application, I will leave those details to you for now. Perhaps I will extend this tutorial in the future. Let me know if you think that would be helpful.

