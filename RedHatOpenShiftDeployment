#Deploying Node Applications onto RedHat OpenShift
A short tutorial explaining how to get Node up and running on OpenShift for Development or Production
Be sure that you have [**git**](https://git-scm.com/) installed before following this tutorial.
##Why use RedHat OpenShift?
RedHat OpenShift provides 3 gears for running your application at no charge. They support a [wide range of languages](https://developers.openshift.com/en/languages-overview.html) as well as community provided solutions that integrate into their product. If they do not have what you need, no problem, they make it easy for you to [build your own](https://developers.openshift.com/en/get-involved-extend-openshift.html). They have [database add-ons](https://developers.openshift.com/en/databases-overview.html) built into the product. It is easy to get started and the free plan does not require a credit card. Simply [create an account](https://www.openshift.com/app/account/new) and start building your server.
##Setting up Your Node.js Instance
####[Create Account](https://www.openshift.com/app/account/new)
If you have not done so already created an account. Use the link above if you like. Once your account is created and your email is verified you will be able to build your server.
####Add an Application
If you already have an application to deploy, you will still want to take these steps first so you can see the way that your cartridge will be setup. You will end up with a default static site which will give you an example of where to keep your assets, etc. As you will see making some minor changes on both sides will pose no real challenge. If you are just starting your app, you will only need to be concerned with replacing or modifying default files and conforming your directory structure to the default from the beginning.
#####Creating The Node Application
Once you login to your new account you will see an Applications tab on the upper right. If not already selected, choose it and then click on **Add Application...**. You will be presented with a list of cartridges (cartridges are used to create different flavors of servers, databases and the like) and a **Browse by tag...**. Choose Browse by tag and select Node.js from the list. You will then be provided with a list of Node based cartridges. For the purposes of this tutorial, we want to simply select a node server. There are currently two. Scroll down the list to find [Node.js 0.12](https://github.com/ryanj/nodejs-custom-version-openshift) *written by Ryan Jarvinen* The reason for selecting this cartridge is that while it defaults to ver 0.12. We can use any version of Node.js that we desire by making a simple change to the package.json file. The other cartridge automatically applies security updates but only works with ver 0.10. Choosing Ryan's cartridge will simplify things and make it easier to change the version in future deployments. Once you have found Ryan's cartridge, click the **Learn more** link, and then click on **Deploy**. You will then be presented with the application configuration page. For now, we will just keep the defaults. Scroll to the bottom of the page and click **Create Application**. It might take a little time for OpenShift to complete this task, so you can take a little break and come back. Once the application has been created, you will be presented with an information screen. Click the **Continue to the application overview page** link at the top of the page. At this point your website is up and running with the default files. Leave this page open for now and open a command prompt for the next step.
####Setting up Access to your Application
#####Installing the Client Tools
This tutorial is has a focus on linux/unix operating systems, so if you are using a different operating system you can follow the steps [here](https://developers.openshift.com/en/getting-started-overview.html?sc_cid=70160000000UJArAAO&gclid=Cj0KEQiAlae1BRCU2qaz2__t9IIBEiQAKRGDVbCAJLbI8ox3wy-m893aPwWpvvSx6hwbYRyad-wFWEMaAgfD8P8HAQ) to find instructions for specific to your operating system for the client tools install. Otherwise, read on. The client tools are written in **Ruby**, so if you do not already have Ruby installed, do so now using the package manager for your version of linux. For the latest version on Fedora enter the following command as root user or using the **sudo** prefix: ```dnf install rubygems``` For other versions of linux, you should only need to replace *dnf* with the package manager for your version of linux. If you are unsure how to run your package manager, visit the website for your version of linux. Once ruby is installed we can install the client tools as root or using the sudo prefix ```gem install rhc```. You may might be able to install the tools using your linux package manager directly. Only do it if you can not get Ruby to work as it will not be updated as often as the Ruby version.
####Running Client Setup
Enter ```rhc setup``` and you will be prompted with a website option. Accept the default by entering *yes*. Then enter your *username* and *password*. Now the setup will create ssh keys to be used for accessing your site. Unless you know enough to do otherwise, accept all the defaults except for the key name. Use a name to associate the key with your site. The last thing that the setup will do is verify that you have git installed. You will not find out what it does when git is not installed since you installed it before attempting this tutorial as instructed at the beginning, so at this point setup will exit.
####Download the Source Code
Ok, remember how I said to leave application overview page open? You did, right? Lets go back to the browser and copy the source code url located on the right hand side of the page. And if you did not leave the page open, no worries, just click the application tab and then select the application to open the page up again. Now lets go back to the command prompt. Change to or create the directory in which you want to keep your development projects. Then enter ```git clone *paste url here*```. In a few seconds you should have all the files for your website and the required settings to interact with the server using git. Now lets take a look at what we get.
####Default Structure and Files
The following directories are created by default: **.openshift**(don't touch this), **.git**(of course, don't touch this either), **node_modules**, and **static**. Other than static and the root directory of the project, you probably will not want to directly modify any of the default directories. The following files are created in the root project directory: **package.json**, **README**, **README.md**, **server.js**, and **index.html**. package.json, of course is our application's configuration file for all things node. README contains some very useful information regarding the default characteristics of the application. README.md as you might expect contains information about our cartridge. Eventually, you will want to replace this with your own README.md, but it contains some useful reference material, so you should probably keep it around for now. Lets look at these directories and files more closely.
####package.json
We are dealing with this file first as it is the first one we want to modify. It is within the package.json file that we choose the version of node with which we want our application to use. If we open the package.json up, we will find that the second key is called 'version' initially the version value is '0.12'. Change the value to your preferred version and, behold, your will now be using that version of node when you push up to OpenShift. I like using the latest stable [node version](https://nodejs.org/en/). You may prefer to be more conservative or cutting edge, so choose your version, (make sure you have it on your development machine), replace the value in the package.json, save and git push. Your server is now running that version of node. Their are a number of other things in the package.json that you may want to modify or understand better. They are beyond the scope of the tutorial. For more information on the all important package.json [see the npm site](https://docs.npmjs.com/files/package.json).
####.gitignore
Right, this file does not exist, but it should. Make sure to create it and at least add the node_modules folder to it. [more information about .gitignore](https://git-scm.com/docs/gitignore)
####/static
Before we can discuss server.js or index.html, we need to go over the static directory. In is mostly self explanatory, but there are some things we should know that will make working on our application with OpenShift easier. If you look inside the directory, you will find that there is not much inside. Just a CSS folder with a site.css file in it. Alright, if you have already developed a site and are moving it to OpenShift I would suggest you put your style sheets in this CSS folder. If you are just getting started on your application, this is where you want to put the style sheets that you create or build. This static folder is viewed as the root folder of the website and so all your static assets and every file the application requires on the client side needs to find its home here. (Actually, you can change the settings surrounding this in server.js, htis is the simplest way to proceed. Create as many sub folders as you require, but make sure the static directory is where they start. If you are moving your site, you may find that the easiest way to get it up is to do this as well, but you may need to change the paths recorded in your files which need access. You probably will not need to do this unless you have previously stored these files in application root. Let us now complete this 'static' puzzle.
####server.js
The first thing you will notice in the server.js file, if you open it in a decent editor, is that it is missing some semicolons and has some require statements that can't find the node modules to which they refer. Apparently we got lucky with the semicolons, since the app runs fine on OpenShift, but if you are like me, you will probably want to add them. Once we start changing the file around, it could become a problem. So what about the require statements. That is an easy fix, just run ```npm install```. This will load up your computer with the required files. If you have used git to deploy to a service like this before, you may have had to make sure that you did not 'git' ignore the node modules because the service required them to be uploaded. It is a good thing that OpenShift does not. If you are familiar with [express.js](http://expressjs.com/), you probably are surprised to see that it does not exist here. Instead, another framework called [restify is used.](http://restify.com/) We could replace restify with express, but we like learning new things, so we will stick with it. Also, I kind of like it. Ok, lets get back to the static folder for a moment, we wont need to leave server.js, just look at line 26. Here we find a regular expression and the serveStatic method of **restify**. Notice that they are both passed in as parameters to the server app.get method. You should also see that the directory names *css*, *js*, and *img* sit comfortably inside the inner parenthesis separated by the '|' character. Putting any directory names that you used to create directories within the static folder can be placed here to be visible to the application as top level directories on the client side. Note that the *img* and *js* directories do not exist in static, but if you create them for your JavaScript and images, leaving this line as is will take care of the rest. Ok, just so we are clear, any folder that we want to expose as a top level directory in application root will need to have its name in the inner parenthesis of this regular expression. Now you may not want to use the static directory as your application root. This is not required, but you will need to change the end of line 26 the name of a different directory. The nice thing here is that the subdirectory names can stay the same. The directories and files themselves need only be moved the directory you appoint by replacing './static/' with './*your directory*/' at the end of the line.
####index.html
index.html is the only client side asset that appears outside of the static directory or the application root. It remains in the project root directory. The only thing I need point out about this file is that the file references it contains need be constructed with the assumption that whatever is specified in line 26 of server.js as the directory, is the top or root of the application directory. For instance, with the default settings a reference to 'css/style.css' in index.html is equivalent to static/css/style.css from the perspective of the project's root.